/*=============================================================================
 LivRDGSegmentPS.usf: Masks foreground using depth comparison
 between foreground and background. Mask also written to alpha.  Also copies background.
 =============================================================================*/


#include "/Engine/Public/Platform.ush"
#include "/Engine/Private/Common.ush"
#include "/Engine/Private/SceneTexturesCommon.ush"
#include "/Engine/Generated/GeneratedUniformBuffers.ush" 
#include "/Engine/Private/SceneTextureParameters.ush"
#include "/Engine/Private/DeferredShadingCommon.ush"        // GetGBufferData()
#include "/Engine/Private/TonemapCommon.ush"

/* Declaration of all variables
=============================================================================*/

Texture2D ForegroundTexture;
SamplerState ForegroundSampler;

Texture2D BackgroundTexture;
SamplerState BackgroundSampler;

Texture2D EyeAdaptationTexture;



/* Pixel shader
=============================================================================*/

void MainPS(noperspective float4 UVAndScreenPos : TEXCOORD0,
	in float4 SVPos : SV_POSITION,
	out float4 OutForeground : SV_Target0,
	out float4 OutBackground : SV_Target1)
{
	float2 UV = UVAndScreenPos.xy;

	float2 ScreenUV = SvPositionToBufferUV(SVPos);

	const float Exposure = EyeAdaptationTexture.Load(int3(0, 0, 0)).x;

	OutForeground = ForegroundTexture.Sample(ForegroundSampler, ScreenUV);
	OutBackground = BackgroundTexture.Sample(BackgroundSampler, ScreenUV);

	//OutForeground.rgb = sRGBToLinear(OutForeground.rgb);
	//OutBackground.rgb = sRGBToLinear(OutBackground.rgb);

	//OutForeground.rgb = LinearToSrgb(OutBackground.rgb);
	//OutBackground.rgb = LinearToSrgb(OutBackground.rgb);

	OutForeground.rgb *= Exposure;
	OutBackground.rgb *= Exposure;

	//OutForeground.rgb = LinearToSrgb(OutForeground.rgb);
	//OutBackground.rgb = LinearToSrgb(OutBackground.rgb);
}


